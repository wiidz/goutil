// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package configMng

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng(in *jlexer.Lexer, out *WechatConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "app_id":
			out.AppID = string(in.String())
		case "app_secret":
			out.AppSecret = string(in.String())
		case "grant_type":
			out.GrantType = string(in.String())
		case "pay_key":
			out.PayKey = string(in.String())
		case "mech_id":
			out.MechID = string(in.String())
		case "notify_url":
			out.NotifyUrl = string(in.String())
		case "refund_url":
			out.RefundUrl = string(in.String())
		case "cert_path":
			out.CertPath = string(in.String())
		case "cert_key_path":
			out.CertKeyPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng(out *jwriter.Writer, in WechatConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"app_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"app_secret\":"
		out.RawString(prefix)
		out.String(string(in.AppSecret))
	}
	{
		const prefix string = ",\"grant_type\":"
		out.RawString(prefix)
		out.String(string(in.GrantType))
	}
	{
		const prefix string = ",\"pay_key\":"
		out.RawString(prefix)
		out.String(string(in.PayKey))
	}
	{
		const prefix string = ",\"mech_id\":"
		out.RawString(prefix)
		out.String(string(in.MechID))
	}
	{
		const prefix string = ",\"notify_url\":"
		out.RawString(prefix)
		out.String(string(in.NotifyUrl))
	}
	{
		const prefix string = ",\"refund_url\":"
		out.RawString(prefix)
		out.String(string(in.RefundUrl))
	}
	{
		const prefix string = ",\"cert_path\":"
		out.RawString(prefix)
		out.String(string(in.CertPath))
	}
	{
		const prefix string = ",\"cert_key_path\":"
		out.RawString(prefix)
		out.String(string(in.CertKeyPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WechatConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WechatConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WechatConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WechatConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng(l, v)
}
func easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng1(in *jlexer.Lexer, out *RedisConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "idle_timeout":
			out.IdleTimeout = int(in.Int())
		case "datebase":
			out.Database = int(in.Int())
		case "max_active":
			out.MaxActive = int(in.Int())
		case "max_idle":
			out.MaxIdle = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng1(out *jwriter.Writer, in RedisConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"idle_timeout\":"
		out.RawString(prefix)
		out.Int(int(in.IdleTimeout))
	}
	{
		const prefix string = ",\"datebase\":"
		out.RawString(prefix)
		out.Int(int(in.Database))
	}
	{
		const prefix string = ",\"max_active\":"
		out.RawString(prefix)
		out.Int(int(in.MaxActive))
	}
	{
		const prefix string = ",\"max_idle\":"
		out.RawString(prefix)
		out.Int(int(in.MaxIdle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedisConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedisConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedisConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedisConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng1(l, v)
}
func easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng2(in *jlexer.Lexer, out *RabbitMQConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng2(out *jwriter.Writer, in RabbitMQConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RabbitMQConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RabbitMQConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RabbitMQConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RabbitMQConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng2(l, v)
}
func easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng3(in *jlexer.Lexer, out *OssConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_key_id":
			out.AccessKeyID = string(in.String())
		case "access_key_secret":
			out.AccessKeySecret = string(in.String())
		case "end_point":
			out.EndPoint = string(in.String())
		case "bucket_name":
			out.BucketName = string(in.String())
		case "upload_path":
			out.UploadPath = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "call_back_url":
			out.CallBackUrl = string(in.String())
		case "expire_time":
			out.ExpireTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng3(out *jwriter.Writer, in OssConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_key_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessKeyID))
	}
	{
		const prefix string = ",\"access_key_secret\":"
		out.RawString(prefix)
		out.String(string(in.AccessKeySecret))
	}
	{
		const prefix string = ",\"end_point\":"
		out.RawString(prefix)
		out.String(string(in.EndPoint))
	}
	{
		const prefix string = ",\"bucket_name\":"
		out.RawString(prefix)
		out.String(string(in.BucketName))
	}
	{
		const prefix string = ",\"upload_path\":"
		out.RawString(prefix)
		out.String(string(in.UploadPath))
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"call_back_url\":"
		out.RawString(prefix)
		out.String(string(in.CallBackUrl))
	}
	{
		const prefix string = ",\"expire_time\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExpireTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OssConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OssConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OssConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OssConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng3(l, v)
}
func easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng4(in *jlexer.Lexer, out *MysqlConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "collation":
			out.Collation = string(in.String())
		case "db_name":
			out.DbName = string(in.String())
		case "charset":
			out.Charset = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng4(out *jwriter.Writer, in MysqlConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"collation\":"
		out.RawString(prefix)
		out.String(string(in.Collation))
	}
	{
		const prefix string = ",\"db_name\":"
		out.RawString(prefix)
		out.String(string(in.DbName))
	}
	{
		const prefix string = ",\"charset\":"
		out.RawString(prefix)
		out.String(string(in.Charset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MysqlConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MysqlConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MysqlConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MysqlConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng4(l, v)
}
func easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng5(in *jlexer.Lexer, out *EsConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng5(out *jwriter.Writer, in EsConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EsConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EsConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EsConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EsConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng5(l, v)
}
func easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng6(in *jlexer.Lexer, out *AppConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "debug":
			out.Debug = bool(in.Bool())
		case "http_port":
			out.HttpPort = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng6(out *jwriter.Writer, in AppConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"debug\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Debug))
	}
	{
		const prefix string = ",\"http_port\":"
		out.RawString(prefix)
		out.String(string(in.HttpPort))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsConfigMng6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsConfigMng6(l, v)
}
