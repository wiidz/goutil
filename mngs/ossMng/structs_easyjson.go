// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ossMng

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComWiidzGoutilMngsOssMng(in *jlexer.Lexer, out *PolicyToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accessid":
			out.AccessKeyId = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "expire":
			out.Expire = int64(in.Int64())
		case "signature":
			out.Signature = string(in.String())
		case "policy":
			out.Policy = string(in.String())
		case "dir":
			out.Dir = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComWiidzGoutilMngsOssMng(out *jwriter.Writer, in PolicyToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accessid\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessKeyId))
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"expire\":"
		out.RawString(prefix)
		out.Int64(int64(in.Expire))
	}
	{
		const prefix string = ",\"signature\":"
		out.RawString(prefix)
		out.String(string(in.Signature))
	}
	{
		const prefix string = ",\"policy\":"
		out.RawString(prefix)
		out.String(string(in.Policy))
	}
	{
		const prefix string = ",\"dir\":"
		out.RawString(prefix)
		out.String(string(in.Dir))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolicyToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsOssMng(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolicyToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsOssMng(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolicyToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsOssMng(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolicyToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsOssMng(l, v)
}
func easyjson6a975c40DecodeGithubComWiidzGoutilMngsOssMng1(in *jlexer.Lexer, out *PolicyConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "expiration":
			out.Expiration = string(in.String())
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([][]string, 0, 2)
					} else {
						out.Conditions = [][]string{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 []string
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]string, 0, 4)
							} else {
								v1 = []string{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 string
							v2 = string(in.String())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Conditions = append(out.Conditions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComWiidzGoutilMngsOssMng1(out *jwriter.Writer, in PolicyConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"expiration\":"
		out.RawString(prefix[1:])
		out.String(string(in.Expiration))
	}
	{
		const prefix string = ",\"conditions\":"
		out.RawString(prefix)
		if in.Conditions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Conditions {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5, v6 := range v4 {
						if v5 > 0 {
							out.RawByte(',')
						}
						out.String(string(v6))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PolicyConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsOssMng1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PolicyConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComWiidzGoutilMngsOssMng1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PolicyConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsOssMng1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PolicyConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComWiidzGoutilMngsOssMng1(l, v)
}
