// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package appMng

import (
	dbStruct "emall/structs/dbStruct"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	gorm "gorm.io/gorm"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeEmallMngsAppMng(in *jlexer.Lexer, out *WechatPayConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wechat_pay_app_id":
			out.WechatPayAppID = string(in.String())
		case "wechat_pay_secret":
			out.WechatPaySecret = string(in.String())
		case "wechat_pay_mch_id":
			out.WechatPayMchID = string(in.String())
		case "wechat_pay_cert_uri":
			out.WechatPayCertURI = string(in.String())
		case "wechat_pay_key_uri":
			out.WechatPayKeyURI = string(in.String())
		case "wechat_pay_cert_content":
			out.WechatPayCertContent = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng(out *jwriter.Writer, in WechatPayConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wechat_pay_app_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.WechatPayAppID))
	}
	{
		const prefix string = ",\"wechat_pay_secret\":"
		out.RawString(prefix)
		out.String(string(in.WechatPaySecret))
	}
	{
		const prefix string = ",\"wechat_pay_mch_id\":"
		out.RawString(prefix)
		out.String(string(in.WechatPayMchID))
	}
	{
		const prefix string = ",\"wechat_pay_cert_uri\":"
		out.RawString(prefix)
		out.String(string(in.WechatPayCertURI))
	}
	{
		const prefix string = ",\"wechat_pay_key_uri\":"
		out.RawString(prefix)
		out.String(string(in.WechatPayKeyURI))
	}
	{
		const prefix string = ",\"wechat_pay_cert_content\":"
		out.RawString(prefix)
		out.String(string(in.WechatPayCertContent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WechatPayConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WechatPayConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WechatPayConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WechatPayConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng1(in *jlexer.Lexer, out *WechatOaConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wechat_oa_app_id":
			out.WechatOaAppID = string(in.String())
		case "wechat_oa_app_secret":
			out.WechatOaAppSecret = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng1(out *jwriter.Writer, in WechatOaConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wechat_oa_app_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.WechatOaAppID))
	}
	{
		const prefix string = ",\"wechat_oa_app_secret\":"
		out.RawString(prefix)
		out.String(string(in.WechatOaAppSecret))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WechatOaConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WechatOaConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WechatOaConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WechatOaConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng1(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng2(in *jlexer.Lexer, out *WechatMiniConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wechat_mini_app_id":
			out.WechatMiniAppID = string(in.String())
		case "wechat_mini_app_secret":
			out.WechatMiniAppSecret = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng2(out *jwriter.Writer, in WechatMiniConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wechat_mini_app_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.WechatMiniAppID))
	}
	{
		const prefix string = ",\"wechat_mini_app_secret\":"
		out.RawString(prefix)
		out.String(string(in.WechatMiniAppSecret))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WechatMiniConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WechatMiniConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WechatMiniConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WechatMiniConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng2(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng3(in *jlexer.Lexer, out *UserLvExpConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lv1_to_lv2":
			out.Lv1ToLv2 = int(in.Int())
		case "lv2_to_lv3":
			out.Lv2ToLv3 = int(in.Int())
		case "lv3_to_lv4":
			out.Lv3ToLv4 = int(in.Int())
		case "lv4_to_lv5":
			out.Lv4ToLv5 = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng3(out *jwriter.Writer, in UserLvExpConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lv1_to_lv2\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Lv1ToLv2))
	}
	{
		const prefix string = ",\"lv2_to_lv3\":"
		out.RawString(prefix)
		out.Int(int(in.Lv2ToLv3))
	}
	{
		const prefix string = ",\"lv3_to_lv4\":"
		out.RawString(prefix)
		out.Int(int(in.Lv3ToLv4))
	}
	{
		const prefix string = ",\"lv4_to_lv5\":"
		out.RawString(prefix)
		out.Int(int(in.Lv4ToLv5))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserLvExpConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserLvExpConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserLvExpConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserLvExpConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng3(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng4(in *jlexer.Lexer, out *SignBonusRuleConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "continuity":
			if in.IsNull() {
				in.Skip()
				out.Continuity = nil
			} else {
				in.Delim('[')
				if out.Continuity == nil {
					if !in.IsDelim(']') {
						out.Continuity = make([]*SignBonusRule, 0, 8)
					} else {
						out.Continuity = []*SignBonusRule{}
					}
				} else {
					out.Continuity = (out.Continuity)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *SignBonusRule
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(SignBonusRule)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Continuity = append(out.Continuity, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			if in.IsNull() {
				in.Skip()
				out.Total = nil
			} else {
				in.Delim('[')
				if out.Total == nil {
					if !in.IsDelim(']') {
						out.Total = make([]*SignBonusRule, 0, 8)
					} else {
						out.Total = []*SignBonusRule{}
					}
				} else {
					out.Total = (out.Total)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *SignBonusRule
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(SignBonusRule)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Total = append(out.Total, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "continuity_cycle_days":
			out.ContinuityCycleDays = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng4(out *jwriter.Writer, in SignBonusRuleConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"continuity\":"
		out.RawString(prefix[1:])
		if in.Continuity == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Continuity {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					(*v4).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		if in.Total == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Total {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"continuity_cycle_days\":"
		out.RawString(prefix)
		out.Int(int(in.ContinuityCycleDays))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignBonusRuleConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignBonusRuleConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignBonusRuleConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignBonusRuleConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng4(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng5(in *jlexer.Lexer, out *SignBonusRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "exp":
			out.Exp = int(in.Int())
		case "point":
			out.Point = int(in.Int())
		case "coupon_ids":
			if in.IsNull() {
				in.Skip()
				out.CouponIDs = nil
			} else {
				in.Delim('[')
				if out.CouponIDs == nil {
					if !in.IsDelim(']') {
						out.CouponIDs = make([]uint64, 0, 8)
					} else {
						out.CouponIDs = []uint64{}
					}
				} else {
					out.CouponIDs = (out.CouponIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v7 uint64
					v7 = uint64(in.Uint64())
					out.CouponIDs = append(out.CouponIDs, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng5(out *jwriter.Writer, in SignBonusRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"exp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Exp))
	}
	{
		const prefix string = ",\"point\":"
		out.RawString(prefix)
		out.Int(int(in.Point))
	}
	{
		const prefix string = ",\"coupon_ids\":"
		out.RawString(prefix)
		if in.CouponIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.CouponIDs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignBonusRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignBonusRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignBonusRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignBonusRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng5(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng6(in *jlexer.Lexer, out *RechargeRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bonus_rule":
			if in.IsNull() {
				in.Skip()
				out.BonusRule = nil
			} else {
				if out.BonusRule == nil {
					out.BonusRule = new(BonusRule)
				}
				(*out.BonusRule).UnmarshalEasyJSON(in)
			}
		case "price":
			out.Price = float64(in.Float64())
		case "balance":
			out.Balance = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng6(out *jwriter.Writer, in RechargeRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bonus_rule\":"
		out.RawString(prefix[1:])
		if in.BonusRule == nil {
			out.RawString("null")
		} else {
			(*in.BonusRule).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix)
		out.Float64(float64(in.Balance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RechargeRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RechargeRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RechargeRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RechargeRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng6(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng7(in *jlexer.Lexer, out *RechargeConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rules":
			if in.IsNull() {
				in.Skip()
				out.Rules = nil
			} else {
				in.Delim('[')
				if out.Rules == nil {
					if !in.IsDelim(']') {
						out.Rules = make(RechargeRules, 0, 8)
					} else {
						out.Rules = RechargeRules{}
					}
				} else {
					out.Rules = (out.Rules)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *RechargeRule
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(RechargeRule)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Rules = append(out.Rules, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_able":
			out.IsAble = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng7(out *jwriter.Writer, in RechargeConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rules\":"
		out.RawString(prefix[1:])
		if in.Rules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Rules {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_able\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAble))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RechargeConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RechargeConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RechargeConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RechargeConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng7(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng8(in *jlexer.Lexer, out *OSSConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "oss_access_key_id":
			out.OssAccessKeyID = string(in.String())
		case "oss_access_key_secret":
			out.OssAccessKeySecret = string(in.String())
		case "oss_host":
			out.OssHost = string(in.String())
		case "oss_end_point":
			out.OssEndPoint = string(in.String())
		case "oss_bucket_name":
			out.OssBucketName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng8(out *jwriter.Writer, in OSSConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"oss_access_key_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.OssAccessKeyID))
	}
	{
		const prefix string = ",\"oss_access_key_secret\":"
		out.RawString(prefix)
		out.String(string(in.OssAccessKeySecret))
	}
	{
		const prefix string = ",\"oss_host\":"
		out.RawString(prefix)
		out.String(string(in.OssHost))
	}
	{
		const prefix string = ",\"oss_end_point\":"
		out.RawString(prefix)
		out.String(string(in.OssEndPoint))
	}
	{
		const prefix string = ",\"oss_bucket_name\":"
		out.RawString(prefix)
		out.String(string(in.OssBucketName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OSSConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OSSConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OSSConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OSSConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng8(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng9(in *jlexer.Lexer, out *PostConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_read_multiple":
			out.PostReadMultiple = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng9(out *jwriter.Writer, in PostConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_read_multiple\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PostReadMultiple))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng9(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng10(in *jlexer.Lexer, out *MysqlConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "db_name":
			out.DbName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng10(out *jwriter.Writer, in MysqlConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"db_name\":"
		out.RawString(prefix)
		out.String(string(in.DbName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MysqlConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MysqlConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MysqlConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MysqlConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng10(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng11(in *jlexer.Lexer, out *BonusRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "exp":
			out.Exp = int(in.Int())
		case "point":
			out.Point = int(in.Int())
		case "coupon_ids":
			if in.IsNull() {
				in.Skip()
				out.CouponIDs = nil
			} else {
				in.Delim('[')
				if out.CouponIDs == nil {
					if !in.IsDelim(']') {
						out.CouponIDs = make([]uint64, 0, 8)
					} else {
						out.CouponIDs = []uint64{}
					}
				} else {
					out.CouponIDs = (out.CouponIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v13 uint64
					v13 = uint64(in.Uint64())
					out.CouponIDs = append(out.CouponIDs, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "coupons":
			if in.IsNull() {
				in.Skip()
				out.Coupons = nil
			} else {
				in.Delim('[')
				if out.Coupons == nil {
					if !in.IsDelim(']') {
						out.Coupons = make([]*dbStruct.UCouponPreview, 0, 8)
					} else {
						out.Coupons = []*dbStruct.UCouponPreview{}
					}
				} else {
					out.Coupons = (out.Coupons)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *dbStruct.UCouponPreview
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(dbStruct.UCouponPreview)
						}
						easyjson6a975c40DecodeEmallStructsDbStruct(in, v14)
					}
					out.Coupons = append(out.Coupons, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng11(out *jwriter.Writer, in BonusRule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Exp))
	}
	{
		const prefix string = ",\"point\":"
		out.RawString(prefix)
		out.Int(int(in.Point))
	}
	{
		const prefix string = ",\"coupon_ids\":"
		out.RawString(prefix)
		if in.CouponIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.CouponIDs {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"coupons\":"
		out.RawString(prefix)
		if in.Coupons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Coupons {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					easyjson6a975c40EncodeEmallStructsDbStruct(out, *v18)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BonusRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BonusRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BonusRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BonusRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng11(l, v)
}
func easyjson6a975c40DecodeEmallStructsDbStruct(in *jlexer.Lexer, out *dbStruct.UCouponPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "name_en":
			out.NameEn = string(in.String())
		case "provide_way":
			out.ProvideWay = string(in.String())
		case "kind":
			out.Kind = int8(in.Int8())
		case "benefit":
			out.Benefit = float64(in.Float64())
		case "able_price":
			out.AblePrice = float64(in.Float64())
		case "able_spu_id":
			out.AbleSpuID = uint64(in.Uint64())
		case "able_sort_id":
			out.AbleSortID = uint64(in.Uint64())
		case "disable_spu_ids":
			out.DisableSpuIDs = string(in.String())
		case "disable_sort_ids":
			out.DisableSortIDs = string(in.String())
		case "status":
			out.Status = int8(in.Int8())
		case "able_sort":
			if in.IsNull() {
				in.Skip()
				out.AbleSort = nil
			} else {
				if out.AbleSort == nil {
					out.AbleSort = new(dbStruct.USortName)
				}
				easyjson6a975c40DecodeEmallStructsDbStruct1(in, out.AbleSort)
			}
		case "able_spu":
			if in.IsNull() {
				in.Skip()
				out.AbleSpu = nil
			} else {
				if out.AbleSpu == nil {
					out.AbleSpu = new(dbStruct.USpuName)
				}
				easyjson6a975c40DecodeEmallStructsDbStruct2(in, out.AbleSpu)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallStructsDbStruct(out *jwriter.Writer, in dbStruct.UCouponPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"name_en\":"
		out.RawString(prefix)
		out.String(string(in.NameEn))
	}
	{
		const prefix string = ",\"provide_way\":"
		out.RawString(prefix)
		out.String(string(in.ProvideWay))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.Int8(int8(in.Kind))
	}
	{
		const prefix string = ",\"benefit\":"
		out.RawString(prefix)
		out.Float64(float64(in.Benefit))
	}
	{
		const prefix string = ",\"able_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.AblePrice))
	}
	{
		const prefix string = ",\"able_spu_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AbleSpuID))
	}
	{
		const prefix string = ",\"able_sort_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AbleSortID))
	}
	{
		const prefix string = ",\"disable_spu_ids\":"
		out.RawString(prefix)
		out.String(string(in.DisableSpuIDs))
	}
	{
		const prefix string = ",\"disable_sort_ids\":"
		out.RawString(prefix)
		out.String(string(in.DisableSortIDs))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int8(int8(in.Status))
	}
	if in.AbleSort != nil {
		const prefix string = ",\"able_sort\":"
		out.RawString(prefix)
		easyjson6a975c40EncodeEmallStructsDbStruct1(out, *in.AbleSort)
	}
	if in.AbleSpu != nil {
		const prefix string = ",\"able_spu\":"
		out.RawString(prefix)
		easyjson6a975c40EncodeEmallStructsDbStruct2(out, *in.AbleSpu)
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeEmallStructsDbStruct2(in *jlexer.Lexer, out *dbStruct.USpuName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name_cn":
			out.NameCn = string(in.String())
		case "name_en":
			out.NameEn = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallStructsDbStruct2(out *jwriter.Writer, in dbStruct.USpuName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name_cn\":"
		out.RawString(prefix)
		out.String(string(in.NameCn))
	}
	{
		const prefix string = ",\"name_en\":"
		out.RawString(prefix)
		out.String(string(in.NameEn))
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeEmallStructsDbStruct1(in *jlexer.Lexer, out *dbStruct.USortName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "merge_name":
			out.MergeName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallStructsDbStruct1(out *jwriter.Writer, in dbStruct.USortName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"merge_name\":"
		out.RawString(prefix)
		out.String(string(in.MergeName))
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeEmallMngsAppMng12(in *jlexer.Lexer, out *AppDBRow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "db_name":
			out.DBName = string(in.String())
		case "deleted_at":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(gorm.DeletedAt)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng12(out *jwriter.Writer, in AppDBRow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"db_name\":"
		out.RawString(prefix)
		out.String(string(in.DBName))
	}
	{
		const prefix string = ",\"deleted_at\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppDBRow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppDBRow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppDBRow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppDBRow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng12(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng13(in *jlexer.Lexer, out *AppConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "app_no":
			out.AppNo = string(in.String())
		case "app_name":
			out.AppName = string(in.String())
		case "time_zone":
			out.TimeZone = string(in.String())
		case "alipay_app_id":
			out.AliPayAppID = string(in.String())
		case "alipay_private_key":
			out.AliPrivateKey = string(in.String())
		case "oss_access_key_id":
			out.OssAccessKeyID = string(in.String())
		case "oss_access_key_secret":
			out.OssAccessKeySecret = string(in.String())
		case "oss_host":
			out.OssHost = string(in.String())
		case "oss_end_point":
			out.OssEndPoint = string(in.String())
		case "oss_bucket_name":
			out.OssBucketName = string(in.String())
		case "post_read_multiple":
			out.PostReadMultiple = int(in.Int())
		case "wechat_pay_app_id":
			out.WechatPayAppID = string(in.String())
		case "wechat_pay_secret":
			out.WechatPaySecret = string(in.String())
		case "wechat_pay_mch_id":
			out.WechatPayMchID = string(in.String())
		case "wechat_pay_cert_uri":
			out.WechatPayCertURI = string(in.String())
		case "wechat_pay_key_uri":
			out.WechatPayKeyURI = string(in.String())
		case "wechat_pay_cert_content":
			out.WechatPayCertContent = string(in.String())
		case "wechat_oa_app_id":
			out.WechatOaAppID = string(in.String())
		case "wechat_oa_app_secret":
			out.WechatOaAppSecret = string(in.String())
		case "wechat_mini_app_id":
			out.WechatMiniAppID = string(in.String())
		case "wechat_mini_app_secret":
			out.WechatMiniAppSecret = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "db_name":
			out.DbName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng13(out *jwriter.Writer, in AppConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"app_no\":"
		out.RawString(prefix)
		out.String(string(in.AppNo))
	}
	{
		const prefix string = ",\"app_name\":"
		out.RawString(prefix)
		out.String(string(in.AppName))
	}
	{
		const prefix string = ",\"time_zone\":"
		out.RawString(prefix)
		out.String(string(in.TimeZone))
	}
	{
		const prefix string = ",\"alipay_app_id\":"
		out.RawString(prefix)
		out.String(string(in.AliPayAppID))
	}
	{
		const prefix string = ",\"alipay_private_key\":"
		out.RawString(prefix)
		out.String(string(in.AliPrivateKey))
	}
	{
		const prefix string = ",\"oss_access_key_id\":"
		out.RawString(prefix)
		out.String(string(in.OssAccessKeyID))
	}
	{
		const prefix string = ",\"oss_access_key_secret\":"
		out.RawString(prefix)
		out.String(string(in.OssAccessKeySecret))
	}
	{
		const prefix string = ",\"oss_host\":"
		out.RawString(prefix)
		out.String(string(in.OssHost))
	}
	{
		const prefix string = ",\"oss_end_point\":"
		out.RawString(prefix)
		out.String(string(in.OssEndPoint))
	}
	{
		const prefix string = ",\"oss_bucket_name\":"
		out.RawString(prefix)
		out.String(string(in.OssBucketName))
	}
	{
		const prefix string = ",\"post_read_multiple\":"
		out.RawString(prefix)
		out.Int(int(in.PostReadMultiple))
	}
	{
		const prefix string = ",\"wechat_pay_app_id\":"
		out.RawString(prefix)
		out.String(string(in.WechatPayAppID))
	}
	{
		const prefix string = ",\"wechat_pay_secret\":"
		out.RawString(prefix)
		out.String(string(in.WechatPaySecret))
	}
	{
		const prefix string = ",\"wechat_pay_mch_id\":"
		out.RawString(prefix)
		out.String(string(in.WechatPayMchID))
	}
	{
		const prefix string = ",\"wechat_pay_cert_uri\":"
		out.RawString(prefix)
		out.String(string(in.WechatPayCertURI))
	}
	{
		const prefix string = ",\"wechat_pay_key_uri\":"
		out.RawString(prefix)
		out.String(string(in.WechatPayKeyURI))
	}
	{
		const prefix string = ",\"wechat_pay_cert_content\":"
		out.RawString(prefix)
		out.String(string(in.WechatPayCertContent))
	}
	{
		const prefix string = ",\"wechat_oa_app_id\":"
		out.RawString(prefix)
		out.String(string(in.WechatOaAppID))
	}
	{
		const prefix string = ",\"wechat_oa_app_secret\":"
		out.RawString(prefix)
		out.String(string(in.WechatOaAppSecret))
	}
	{
		const prefix string = ",\"wechat_mini_app_id\":"
		out.RawString(prefix)
		out.String(string(in.WechatMiniAppID))
	}
	{
		const prefix string = ",\"wechat_mini_app_secret\":"
		out.RawString(prefix)
		out.String(string(in.WechatMiniAppSecret))
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"db_name\":"
		out.RawString(prefix)
		out.String(string(in.DbName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AppConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AppConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng13(l, v)
}
func easyjson6a975c40DecodeEmallMngsAppMng14(in *jlexer.Lexer, out *AliPayConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alipay_app_id":
			out.AliPayAppID = string(in.String())
		case "alipay_private_key":
			out.AliPrivateKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeEmallMngsAppMng14(out *jwriter.Writer, in AliPayConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alipay_app_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AliPayAppID))
	}
	{
		const prefix string = ",\"alipay_private_key\":"
		out.RawString(prefix)
		out.String(string(in.AliPrivateKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AliPayConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeEmallMngsAppMng14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AliPayConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeEmallMngsAppMng14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AliPayConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeEmallMngsAppMng14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AliPayConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeEmallMngsAppMng14(l, v)
}
