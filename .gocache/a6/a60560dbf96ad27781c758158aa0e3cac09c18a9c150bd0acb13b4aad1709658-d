// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/hujiayilu/go/pkg/mod/github.com/gen2brain/go-fitz@v1.20.0/fitz.go:1:1
// Package fitz provides wrapper for the [MuPDF](http://mupdf.com/) fitz library
// that can extract pages from PDF and EPUB documents as images, text, html or svg.
package fitz

/*
#include <mupdf/fitz.h>
#include <stdlib.h>

const char *fz_version = FZ_VERSION;
*/
import _ "unsafe"

import (
	"errors"
	"image"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"sync"
	"unsafe"
)

// Errors.
var (
	ErrNoSuchFile    = errors.New("fitz: no such file")
	ErrCreateContext = errors.New("fitz: cannot create context")
	ErrOpenDocument  = errors.New("fitz: cannot open document")
	ErrOpenMemory    = errors.New("fitz: cannot open memory")
	ErrPageMissing   = errors.New("fitz: page missing")
	ErrCreatePixmap  = errors.New("fitz: cannot create pixmap")
	ErrPixmapSamples = errors.New("fitz: cannot get pixmap samples")
	ErrNeedsPassword = errors.New("fitz: document needs password")
	ErrLoadOutline   = errors.New("fitz: cannot load outline")
)

// Document represents fitz document.
type Document struct {
	ctx    * /*line :39:10*/_Ctype_struct_fz_context /*line :39:29*/
	data   []byte // binds data to the Document lifecycle avoiding premature GC
	doc    * /*line :41:10*/_Ctype_struct_fz_document /*line :41:30*/
	mtx    sync.Mutex
	stream * /*line :43:10*/_Ctype_fz_stream /*line :43:21*/
}

// Outline type.
type Outline struct {
	// Hierarchy level of the entry (starting from 1).
	Level int
	// Title of outline item.
	Title string
	// Destination in the document to be displayed when this outline item is activated.
	URI string
	// The page number of an internal link.
	Page int
	// Top.
	Top float64
}

// New returns new fitz document.
func New(filename string) (f *Document, err error) {
	f = &Document{}

	filename, err = filepath.Abs(filename)
	if err != nil {
		return
	}

	if _, e := os.Stat(filename); e != nil {
		err = ErrNoSuchFile
		return
	}

	b, e := ioutil.ReadFile(filename)
	if e != nil {
		err = ErrOpenDocument
		return
	}

	magic := contentType(b)
	if magic == "" {
		err = ErrOpenDocument
		return
	}

	f.ctx = (* /*line :86:12*/_Ctype_struct_fz_context /*line :86:31*/)(unsafe.Pointer(( /*line :86:48*/_Cfunc_fz_new_context_imp /*line :86:67*/)(nil, nil, ( /*line :86:79*/_Ciconst_FZ_STORE_UNLIMITED /*line :86:98*/), ( /*line :86:101*/*_Cvar_fz_version /*line :86:112*/))))
	if f.ctx == nil {
		err = ErrCreateContext
		return
	}

	func() { _cgo0 := /*line :92:34*/f.ctx; _cgoCheckPointer(_cgo0, nil); /*line :92:40*/_Cfunc_fz_register_document_handlers(_cgo0); }()

	cfilename := ( /*line :94:15*/_Cfunc_CString /*line :94:23*/)(filename)
	defer func() func() { _cgo0 := /*line :95:15*/unsafe.Pointer(cfilename); return func() { _cgoCheckPointer(_cgo0, nil); /*line :95:41*/_Cfunc_free(_cgo0); }}()()

	f.doc = func() *_Ctype_struct_fz_document{ _cgo0 := /*line :97:29*/f.ctx; var _cgo1 *_Ctype_char = /*line :97:36*/cfilename; _cgoCheckPointer(_cgo0, nil); return /*line :97:46*/_Cfunc_fz_open_document(_cgo0, _cgo1); }()
	if f.doc == nil {
		err = ErrOpenDocument
		return
	}

	ret := func() _Ctype_int{ _cgo0 := /*line :103:29*/f.ctx; _cgo1 := /*line :103:36*/f.doc; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :103:42*/_Cfunc_fz_needs_password(_cgo0, _cgo1); }()
	v := bool(int(ret) != 0)
	if v {
		err = ErrNeedsPassword
	}

	return
}

// NewFromMemory returns new fitz document from byte slice.
func NewFromMemory(b []byte) (f *Document, err error) {
	f = &Document{}

	f.ctx = (* /*line :116:12*/_Ctype_struct_fz_context /*line :116:31*/)(unsafe.Pointer(( /*line :116:48*/_Cfunc_fz_new_context_imp /*line :116:67*/)(nil, nil, ( /*line :116:79*/_Ciconst_FZ_STORE_UNLIMITED /*line :116:98*/), ( /*line :116:101*/*_Cvar_fz_version /*line :116:112*/))))
	if f.ctx == nil {
		err = ErrCreateContext
		return
	}

	func() { _cgo0 := /*line :122:34*/f.ctx; _cgoCheckPointer(_cgo0, nil); /*line :122:40*/_Cfunc_fz_register_document_handlers(_cgo0); }()

	stream := func() *_Ctype_struct_fz_stream{ _cgo0 := /*line :124:29*/f.ctx; var _cgo1 *_Ctype_uchar = /*line :124:36*/(*_Ctype_uchar /*line :124:45*/)(&b[0]); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :124:63*/(len(b)); _cgoCheckPointer(_cgo0, nil); return /*line :124:72*/_Cfunc_fz_open_memory(_cgo0, _cgo1, _cgo2); }()
	f.stream = func() *_Ctype_struct_fz_stream{ _cgo0 := /*line :125:30*/f.ctx; _cgo1 := /*line :125:37*/stream; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :125:44*/_Cfunc_fz_keep_stream(_cgo0, _cgo1); }()

	if f.stream == nil {
		err = ErrOpenMemory
		return
	}

	magic := contentType(b)
	if magic == "" {
		err = ErrOpenMemory
		return
	}

	f.data = b

	cmagic := ( /*line :140:12*/_Cfunc_CString /*line :140:20*/)(magic)
	defer func() func() { _cgo0 := /*line :141:15*/unsafe.Pointer(cmagic); return func() { _cgoCheckPointer(_cgo0, nil); /*line :141:38*/_Cfunc_free(_cgo0); }}()()

	f.doc = func() *_Ctype_struct_fz_document{ _cgo0 := /*line :143:41*/f.ctx; var _cgo1 *_Ctype_char = /*line :143:48*/cmagic; _cgo2 := /*line :143:56*/f.stream; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo2, nil); return /*line :143:65*/_Cfunc_fz_open_document_with_stream(_cgo0, _cgo1, _cgo2); }()
	if f.doc == nil {
		err = ErrOpenDocument
	}

	ret := func() _Ctype_int{ _cgo0 := /*line :148:29*/f.ctx; _cgo1 := /*line :148:36*/f.doc; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :148:42*/_Cfunc_fz_needs_password(_cgo0, _cgo1); }()
	v := bool(int(ret) != 0)
	if v {
		err = ErrNeedsPassword
	}

	return
}

// NewFromReader returns new fitz document from io.Reader.
func NewFromReader(r io.Reader) (f *Document, err error) {
	b, e := ioutil.ReadAll(r)
	if e != nil {
		err = e
		return
	}

	f, err = NewFromMemory(b)

	return
}

// NumPage returns total number of pages in document.
func (f *Document) NumPage() int {
	return int(func() _Ctype_int{ _cgo0 := /*line :172:30*/f.ctx; _cgo1 := /*line :172:37*/f.doc; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :172:43*/_Cfunc_fz_count_pages(_cgo0, _cgo1); }())
}

// Image returns image for given page number.
func (f *Document) Image(pageNumber int) (image.Image, error) {
	return f.ImageDPI(pageNumber, 300.0)
}

// ImageDPI returns image for given page number and DPI.
func (f *Document) ImageDPI(pageNumber int, dpi float64) (image.Image, error) {
	f.mtx.Lock()
	defer f.mtx.Unlock()

	img := image.RGBA{}

	if pageNumber >= f.NumPage() {
		return nil, ErrPageMissing
	}

	page := func() *_Ctype_struct_fz_page{ _cgo0 := /*line :191:25*/f.ctx; _cgo1 := /*line :191:32*/f.doc; var _cgo2 _Ctype_int = _Ctype_int /*line :191:44*/(pageNumber); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :191:57*/_Cfunc_fz_load_page(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :192:23*/f.ctx; _cgo1 := /*line :192:30*/page; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :192:35*/_Cfunc_fz_drop_page(_cgo0, _cgo1); }}()()

	var bounds  /*line :194:13*/_Ctype_fz_rect /*line :194:22*/
	bounds = func() _Ctype_struct___6{ _cgo0 := /*line :195:27*/f.ctx; _cgo1 := /*line :195:34*/page; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :195:39*/_Cfunc_fz_bound_page(_cgo0, _cgo1); }()

	var ctm  /*line :197:10*/_Ctype_fz_matrix /*line :197:21*/
	ctm = ( /*line :198:8*/_Cfunc_fz_scale /*line :198:17*/)( /*line :198:19*/_Ctype_float /*line :198:26*/(dpi/72),  /*line :198:36*/_Ctype_float /*line :198:43*/(dpi/72))

	var bbox  /*line :200:11*/_Ctype_fz_irect /*line :200:21*/
	bounds = ( /*line :201:11*/_Cfunc_fz_transform_rect /*line :201:29*/)(bounds, ctm)
	bbox = ( /*line :202:9*/_Cfunc_fz_round_rect /*line :202:23*/)(bounds)

	pixmap := func() *_Ctype_struct_fz_pixmap{ _cgo0 := /*line :204:38*/f.ctx; _cgo1 := func() *_Ctype_struct_fz_colorspace{ _cgo0 := /*line :204:61*/f.ctx; _cgoCheckPointer(_cgo0, nil); return /*line :204:67*/_Cfunc_fz_device_rgb(_cgo0); }(); var _cgo2 _Ctype_struct___17 = /*line :204:69*/bbox; var _cgo3 *_Ctype_struct_fz_separations = /*line :204:75*/nil; var _cgo4 _Ctype_int = /*line :204:80*/1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :204:82*/_Cfunc_fz_new_pixmap_with_bbox(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if pixmap == nil {
		return nil, ErrCreatePixmap
	}

	func() { _cgo0 := /*line :209:31*/f.ctx; _cgo1 := /*line :209:38*/pixmap; var _cgo2 _Ctype_int = _Ctype_int /*line :209:51*/(0xff); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :209:58*/_Cfunc_fz_clear_pixmap_with_value(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :210:25*/f.ctx; _cgo1 := /*line :210:32*/pixmap; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :210:39*/_Cfunc_fz_drop_pixmap(_cgo0, _cgo1); }}()()

	device := func() *_Ctype_struct_fz_device{ _cgo0 := /*line :212:33*/f.ctx; var _cgo1 _Ctype_struct___16 = /*line :212:40*/ctm; _cgo2 := /*line :212:45*/pixmap; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo2, nil); return /*line :212:52*/_Cfunc_fz_new_draw_device(_cgo0, _cgo1, _cgo2); }()
	func() { _cgo0 := /*line :213:27*/f.ctx; _cgo1 := /*line :213:34*/device; var _cgo2 _Ctype_int = /*line :213:42*/_Ciconst_FZ_NO_CACHE /*line :213:55*/; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :213:56*/_Cfunc_fz_enable_device_hints(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :214:25*/f.ctx; _cgo1 := /*line :214:32*/device; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :214:39*/_Cfunc_fz_drop_device(_cgo0, _cgo1); }}()()

	drawMatrix := ( /*line :216:16*/*_Cvar_fz_identity /*line :216:28*/)
	func() { _cgo0 := /*line :217:16*/f.ctx; _cgo1 := /*line :217:23*/page; _cgo2 := /*line :217:29*/device; var _cgo3 _Ctype_struct___16 = /*line :217:37*/drawMatrix; var _cgo4 *_Ctype_struct___11 = /*line :217:49*/nil; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgo2, nil); /*line :217:53*/_Cfunc_fz_run_page(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	func() { _cgo0 := /*line :219:20*/f.ctx; _cgo1 := /*line :219:27*/device; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :219:34*/_Cfunc_fz_close_device(_cgo0, _cgo1); }()

	pixels := func() *_Ctype_uchar{ _cgo0 := /*line :221:32*/f.ctx; _cgo1 := /*line :221:39*/pixmap; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :221:46*/_Cfunc_fz_pixmap_samples(_cgo0, _cgo1); }()
	if pixels == nil {
		return nil, ErrPixmapSamples
	}

	img.Pix = func() []byte{ _cgo0 := /*line :226:22*/unsafe.Pointer(pixels); var _cgo1 _Ctype_int = _Ctype_int /*line :226:51*/(4 * bbox.x1 * bbox.y1); _cgoCheckPointer(_cgo0, nil); return /*line :226:71*/_Cfunc_GoBytes(_cgo0, _cgo1); }()
	img.Rect = image.Rect(int(bbox.x0), int(bbox.y0), int(bbox.x1), int(bbox.y1))
	img.Stride = 4 * img.Rect.Max.X

	return &img, nil
}

// ImagePNG returns image for given page number as PNG bytes.
func (f *Document) ImagePNG(pageNumber int, dpi float64) ([]byte, error) {
	f.mtx.Lock()
	defer f.mtx.Unlock()

	if pageNumber >= f.NumPage() {
		return nil, ErrPageMissing
	}

	page := func() *_Ctype_struct_fz_page{ _cgo0 := /*line :242:25*/f.ctx; _cgo1 := /*line :242:32*/f.doc; var _cgo2 _Ctype_int = _Ctype_int /*line :242:44*/(pageNumber); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :242:57*/_Cfunc_fz_load_page(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :243:23*/f.ctx; _cgo1 := /*line :243:30*/page; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :243:35*/_Cfunc_fz_drop_page(_cgo0, _cgo1); }}()()

	var bounds  /*line :245:13*/_Ctype_fz_rect /*line :245:22*/
	bounds = func() _Ctype_struct___6{ _cgo0 := /*line :246:27*/f.ctx; _cgo1 := /*line :246:34*/page; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :246:39*/_Cfunc_fz_bound_page(_cgo0, _cgo1); }()

	var ctm  /*line :248:10*/_Ctype_fz_matrix /*line :248:21*/
	ctm = ( /*line :249:8*/_Cfunc_fz_scale /*line :249:17*/)( /*line :249:19*/_Ctype_float /*line :249:26*/(dpi/72),  /*line :249:36*/_Ctype_float /*line :249:43*/(dpi/72))

	var bbox  /*line :251:11*/_Ctype_fz_irect /*line :251:21*/
	bounds = ( /*line :252:11*/_Cfunc_fz_transform_rect /*line :252:29*/)(bounds, ctm)
	bbox = ( /*line :253:9*/_Cfunc_fz_round_rect /*line :253:23*/)(bounds)

	pixmap := func() *_Ctype_struct_fz_pixmap{ _cgo0 := /*line :255:38*/f.ctx; _cgo1 := func() *_Ctype_struct_fz_colorspace{ _cgo0 := /*line :255:61*/f.ctx; _cgoCheckPointer(_cgo0, nil); return /*line :255:67*/_Cfunc_fz_device_rgb(_cgo0); }(); var _cgo2 _Ctype_struct___17 = /*line :255:69*/bbox; var _cgo3 *_Ctype_struct_fz_separations = /*line :255:75*/nil; var _cgo4 _Ctype_int = /*line :255:80*/1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :255:82*/_Cfunc_fz_new_pixmap_with_bbox(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if pixmap == nil {
		return nil, ErrCreatePixmap
	}

	func() { _cgo0 := /*line :260:31*/f.ctx; _cgo1 := /*line :260:38*/pixmap; var _cgo2 _Ctype_int = _Ctype_int /*line :260:51*/(0xff); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :260:58*/_Cfunc_fz_clear_pixmap_with_value(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :261:25*/f.ctx; _cgo1 := /*line :261:32*/pixmap; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :261:39*/_Cfunc_fz_drop_pixmap(_cgo0, _cgo1); }}()()

	device := func() *_Ctype_struct_fz_device{ _cgo0 := /*line :263:33*/f.ctx; var _cgo1 _Ctype_struct___16 = /*line :263:40*/ctm; _cgo2 := /*line :263:45*/pixmap; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo2, nil); return /*line :263:52*/_Cfunc_fz_new_draw_device(_cgo0, _cgo1, _cgo2); }()
	func() { _cgo0 := /*line :264:27*/f.ctx; _cgo1 := /*line :264:34*/device; var _cgo2 _Ctype_int = /*line :264:42*/_Ciconst_FZ_NO_CACHE /*line :264:55*/; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :264:56*/_Cfunc_fz_enable_device_hints(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :265:25*/f.ctx; _cgo1 := /*line :265:32*/device; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :265:39*/_Cfunc_fz_drop_device(_cgo0, _cgo1); }}()()

	drawMatrix := ( /*line :267:16*/*_Cvar_fz_identity /*line :267:28*/)
	func() { _cgo0 := /*line :268:16*/f.ctx; _cgo1 := /*line :268:23*/page; _cgo2 := /*line :268:29*/device; var _cgo3 _Ctype_struct___16 = /*line :268:37*/drawMatrix; var _cgo4 *_Ctype_struct___11 = /*line :268:49*/nil; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgo2, nil); /*line :268:53*/_Cfunc_fz_run_page(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	func() { _cgo0 := /*line :270:20*/f.ctx; _cgo1 := /*line :270:27*/device; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :270:34*/_Cfunc_fz_close_device(_cgo0, _cgo1); }()

	buf := func() *_Ctype_struct___7{ _cgo0 := /*line :272:44*/f.ctx; _cgo1 := /*line :272:51*/pixmap; var _cgo2 _Ctype_struct___12 = /*line :272:59*/*_Cvar_fz_default_color_params /*line :272:84*/; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :272:85*/_Cfunc_fz_new_buffer_from_pixmap_as_png(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :273:25*/f.ctx; _cgo1 := /*line :273:32*/buf; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :273:36*/_Cfunc_fz_drop_buffer(_cgo0, _cgo1); }}()()

	size := func() _Ctype_size_t{ _cgo0 := /*line :275:30*/f.ctx; _cgo1 := /*line :275:37*/buf; var _cgo2 **_Ctype_uchar = /*line :275:42*/nil; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :275:46*/_Cfunc_fz_buffer_storage(_cgo0, _cgo1, _cgo2); }()
	str := ( /*line :276:9*/_Cfunc_GoStringN /*line :276:19*/)(func() *_Ctype_char{ _cgo0 := /*line :276:45*/f.ctx; _cgo1 := /*line :276:52*/buf; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :276:56*/_Cfunc_fz_string_from_buffer(_cgo0, _cgo1); }(),  /*line :276:58*/_Ctype_int /*line :276:63*/(size))

	return []byte(str), nil
}

// Text returns text for given page number.
func (f *Document) Text(pageNumber int) (string, error) {
	f.mtx.Lock()
	defer f.mtx.Unlock()

	if pageNumber >= f.NumPage() {
		return "", ErrPageMissing
	}

	page := func() *_Ctype_struct_fz_page{ _cgo0 := /*line :290:25*/f.ctx; _cgo1 := /*line :290:32*/f.doc; var _cgo2 _Ctype_int = _Ctype_int /*line :290:44*/(pageNumber); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :290:57*/_Cfunc_fz_load_page(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :291:23*/f.ctx; _cgo1 := /*line :291:30*/page; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :291:35*/_Cfunc_fz_drop_page(_cgo0, _cgo1); }}()()

	var bounds  /*line :293:13*/_Ctype_fz_rect /*line :293:22*/
	bounds = func() _Ctype_struct___6{ _cgo0 := /*line :294:27*/f.ctx; _cgo1 := /*line :294:34*/page; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :294:39*/_Cfunc_fz_bound_page(_cgo0, _cgo1); }()

	var ctm  /*line :296:10*/_Ctype_fz_matrix /*line :296:21*/
	ctm = ( /*line :297:8*/_Cfunc_fz_scale /*line :297:17*/)( /*line :297:19*/_Ctype_float /*line :297:26*/(72.0/72),  /*line :297:37*/_Ctype_float /*line :297:44*/(72.0/72))

	text := func() *_Ctype_struct___14{ _cgo0 := /*line :299:30*/f.ctx; var _cgo1 _Ctype_struct___6 = /*line :299:37*/bounds; _cgoCheckPointer(_cgo0, nil); return /*line :299:44*/_Cfunc_fz_new_stext_page(_cgo0, _cgo1); }()
	defer func() func() { _cgo0 := /*line :300:29*/f.ctx; _cgo1 := /*line :300:36*/text; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :300:41*/_Cfunc_fz_drop_stext_page(_cgo0, _cgo1); }}()()

	var opts  /*line :302:11*/_Ctype_fz_stext_options /*line :302:29*/
	opts.flags = 0

	device := func() *_Ctype_struct_fz_device{ _cgo0 := /*line :305:34*/f.ctx; _cgo1 := /*line :305:41*/text; var _cgo2 *_Ctype_struct___18 = /*line :305:47*/&opts; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :305:53*/_Cfunc_fz_new_stext_device(_cgo0, _cgo1, _cgo2); }()
	func() { _cgo0 := /*line :306:27*/f.ctx; _cgo1 := /*line :306:34*/device; var _cgo2 _Ctype_int = /*line :306:42*/_Ciconst_FZ_NO_CACHE /*line :306:55*/; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :306:56*/_Cfunc_fz_enable_device_hints(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :307:25*/f.ctx; _cgo1 := /*line :307:32*/device; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :307:39*/_Cfunc_fz_drop_device(_cgo0, _cgo1); }}()()

	var cookie  /*line :309:13*/_Ctype_fz_cookie /*line :309:24*/
	func() { _cgo0 := /*line :310:16*/f.ctx; _cgo1 := /*line :310:23*/page; _cgo2 := /*line :310:29*/device; var _cgo3 _Ctype_struct___16 = /*line :310:37*/ctm; var _cgo4 *_Ctype_struct___11 = /*line :310:42*/&cookie; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgo2, nil); /*line :310:50*/_Cfunc_fz_run_page(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	func() { _cgo0 := /*line :312:20*/f.ctx; _cgo1 := /*line :312:27*/device; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :312:34*/_Cfunc_fz_close_device(_cgo0, _cgo1); }()

	buf := func() *_Ctype_struct___7{ _cgo0 := /*line :314:41*/f.ctx; _cgo1 := /*line :314:48*/text; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :314:53*/_Cfunc_fz_new_buffer_from_stext_page(_cgo0, _cgo1); }()
	defer func() func() { _cgo0 := /*line :315:25*/f.ctx; _cgo1 := /*line :315:32*/buf; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :315:36*/_Cfunc_fz_drop_buffer(_cgo0, _cgo1); }}()()

	str := ( /*line :317:9*/_Cfunc_GoString /*line :317:18*/)(func() *_Ctype_char{ _cgo0 := /*line :317:44*/f.ctx; _cgo1 := /*line :317:51*/buf; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :317:55*/_Cfunc_fz_string_from_buffer(_cgo0, _cgo1); }())

	return str, nil
}

// HTML returns html for given page number.
func (f *Document) HTML(pageNumber int, header bool) (string, error) {
	f.mtx.Lock()
	defer f.mtx.Unlock()

	if pageNumber >= f.NumPage() {
		return "", ErrPageMissing
	}

	page := func() *_Ctype_struct_fz_page{ _cgo0 := /*line :331:25*/f.ctx; _cgo1 := /*line :331:32*/f.doc; var _cgo2 _Ctype_int = _Ctype_int /*line :331:44*/(pageNumber); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :331:57*/_Cfunc_fz_load_page(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :332:23*/f.ctx; _cgo1 := /*line :332:30*/page; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :332:35*/_Cfunc_fz_drop_page(_cgo0, _cgo1); }}()()

	var bounds  /*line :334:13*/_Ctype_fz_rect /*line :334:22*/
	bounds = func() _Ctype_struct___6{ _cgo0 := /*line :335:27*/f.ctx; _cgo1 := /*line :335:34*/page; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :335:39*/_Cfunc_fz_bound_page(_cgo0, _cgo1); }()

	var ctm  /*line :337:10*/_Ctype_fz_matrix /*line :337:21*/
	ctm = ( /*line :338:8*/_Cfunc_fz_scale /*line :338:17*/)( /*line :338:19*/_Ctype_float /*line :338:26*/(72.0/72),  /*line :338:37*/_Ctype_float /*line :338:44*/(72.0/72))

	text := func() *_Ctype_struct___14{ _cgo0 := /*line :340:30*/f.ctx; var _cgo1 _Ctype_struct___6 = /*line :340:37*/bounds; _cgoCheckPointer(_cgo0, nil); return /*line :340:44*/_Cfunc_fz_new_stext_page(_cgo0, _cgo1); }()
	defer func() func() { _cgo0 := /*line :341:29*/f.ctx; _cgo1 := /*line :341:36*/text; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :341:41*/_Cfunc_fz_drop_stext_page(_cgo0, _cgo1); }}()()

	var opts  /*line :343:11*/_Ctype_fz_stext_options /*line :343:29*/
	opts.flags = ( /*line :344:15*/_Ciconst_FZ_STEXT_PRESERVE_IMAGES /*line :344:40*/)

	device := func() *_Ctype_struct_fz_device{ _cgo0 := /*line :346:34*/f.ctx; _cgo1 := /*line :346:41*/text; var _cgo2 *_Ctype_struct___18 = /*line :346:47*/&opts; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :346:53*/_Cfunc_fz_new_stext_device(_cgo0, _cgo1, _cgo2); }()
	func() { _cgo0 := /*line :347:27*/f.ctx; _cgo1 := /*line :347:34*/device; var _cgo2 _Ctype_int = /*line :347:42*/_Ciconst_FZ_NO_CACHE /*line :347:55*/; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :347:56*/_Cfunc_fz_enable_device_hints(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :348:25*/f.ctx; _cgo1 := /*line :348:32*/device; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :348:39*/_Cfunc_fz_drop_device(_cgo0, _cgo1); }}()()

	var cookie  /*line :350:13*/_Ctype_fz_cookie /*line :350:24*/
	func() { _cgo0 := /*line :351:16*/f.ctx; _cgo1 := /*line :351:23*/page; _cgo2 := /*line :351:29*/device; var _cgo3 _Ctype_struct___16 = /*line :351:37*/ctm; var _cgo4 *_Ctype_struct___11 = /*line :351:42*/&cookie; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgo2, nil); /*line :351:50*/_Cfunc_fz_run_page(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	func() { _cgo0 := /*line :353:20*/f.ctx; _cgo1 := /*line :353:27*/device; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :353:34*/_Cfunc_fz_close_device(_cgo0, _cgo1); }()

	buf := func() *_Ctype_struct___7{ _cgo0 := /*line :355:25*/f.ctx; var _cgo1 _Ctype_size_t = /*line :355:32*/1024; _cgoCheckPointer(_cgo0, nil); return /*line :355:37*/_Cfunc_fz_new_buffer(_cgo0, _cgo1); }()
	defer func() func() { _cgo0 := /*line :356:25*/f.ctx; _cgo1 := /*line :356:32*/buf; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :356:36*/_Cfunc_fz_drop_buffer(_cgo0, _cgo1); }}()()

	out := func() *_Ctype_struct_fz_output{ _cgo0 := /*line :358:37*/f.ctx; _cgo1 := /*line :358:44*/buf; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :358:48*/_Cfunc_fz_new_output_with_buffer(_cgo0, _cgo1); }()
	defer func() func() { _cgo0 := /*line :359:25*/f.ctx; _cgo1 := /*line :359:32*/out; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :359:36*/_Cfunc_fz_drop_output(_cgo0, _cgo1); }}()()

	if header {
		func() { _cgo0 := /*line :362:35*/f.ctx; _cgo1 := /*line :362:42*/out; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :362:46*/_Cfunc_fz_print_stext_header_as_html(_cgo0, _cgo1); }()
	}
	func() { _cgo0 := /*line :364:32*/f.ctx; _cgo1 := /*line :364:39*/out; _cgo2 := /*line :364:44*/text; var _cgo3 _Ctype_int = _Ctype_int /*line :364:55*/(pageNumber); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgo2, nil); /*line :364:68*/_Cfunc_fz_print_stext_page_as_html(_cgo0, _cgo1, _cgo2, _cgo3); }()
	if header {
		func() { _cgo0 := /*line :366:36*/f.ctx; _cgo1 := /*line :366:43*/out; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :366:47*/_Cfunc_fz_print_stext_trailer_as_html(_cgo0, _cgo1); }()
	}

	str := ( /*line :369:9*/_Cfunc_GoString /*line :369:18*/)(func() *_Ctype_char{ _cgo0 := /*line :369:44*/f.ctx; _cgo1 := /*line :369:51*/buf; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :369:55*/_Cfunc_fz_string_from_buffer(_cgo0, _cgo1); }())

	return str, nil
}

// SVG returns svg document for given page number.
func (f *Document) SVG(pageNumber int) (string, error) {
	f.mtx.Lock()
	defer f.mtx.Unlock()

	if pageNumber >= f.NumPage() {
		return "", ErrPageMissing
	}

	page := func() *_Ctype_struct_fz_page{ _cgo0 := /*line :383:25*/f.ctx; _cgo1 := /*line :383:32*/f.doc; var _cgo2 _Ctype_int = _Ctype_int /*line :383:44*/(pageNumber); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :383:57*/_Cfunc_fz_load_page(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :384:23*/f.ctx; _cgo1 := /*line :384:30*/page; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :384:35*/_Cfunc_fz_drop_page(_cgo0, _cgo1); }}()()

	var bounds  /*line :386:13*/_Ctype_fz_rect /*line :386:22*/
	bounds = func() _Ctype_struct___6{ _cgo0 := /*line :387:27*/f.ctx; _cgo1 := /*line :387:34*/page; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :387:39*/_Cfunc_fz_bound_page(_cgo0, _cgo1); }()

	var ctm  /*line :389:10*/_Ctype_fz_matrix /*line :389:21*/
	ctm = ( /*line :390:8*/_Cfunc_fz_scale /*line :390:17*/)( /*line :390:19*/_Ctype_float /*line :390:26*/(72.0/72),  /*line :390:37*/_Ctype_float /*line :390:44*/(72.0/72))
	bounds = ( /*line :391:11*/_Cfunc_fz_transform_rect /*line :391:29*/)(bounds, ctm)

	buf := func() *_Ctype_struct___7{ _cgo0 := /*line :393:25*/f.ctx; var _cgo1 _Ctype_size_t = /*line :393:32*/1024; _cgoCheckPointer(_cgo0, nil); return /*line :393:37*/_Cfunc_fz_new_buffer(_cgo0, _cgo1); }()
	defer func() func() { _cgo0 := /*line :394:25*/f.ctx; _cgo1 := /*line :394:32*/buf; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :394:36*/_Cfunc_fz_drop_buffer(_cgo0, _cgo1); }}()()

	out := func() *_Ctype_struct_fz_output{ _cgo0 := /*line :396:37*/f.ctx; _cgo1 := /*line :396:44*/buf; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :396:48*/_Cfunc_fz_new_output_with_buffer(_cgo0, _cgo1); }()
	defer func() func() { _cgo0 := /*line :397:25*/f.ctx; _cgo1 := /*line :397:32*/out; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :397:36*/_Cfunc_fz_drop_output(_cgo0, _cgo1); }}()()

	device := func() *_Ctype_struct_fz_device{ _cgo0 := /*line :399:32*/f.ctx; _cgo1 := /*line :399:39*/out; var _cgo2 _Ctype_float = /*line :399:44*/bounds.x1 - bounds.x0; var _cgo3 _Ctype_float = /*line :399:65*/bounds.y1 - bounds.y0; var _cgo4 _Ctype_int = /*line :399:86*/_Ciconst_FZ_SVG_TEXT_AS_PATH /*line :399:107*/; var _cgo5 _Ctype_int = /*line :399:109*/1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :399:111*/_Cfunc_fz_new_svg_device(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5); }()
	func() { _cgo0 := /*line :400:27*/f.ctx; _cgo1 := /*line :400:34*/device; var _cgo2 _Ctype_int = /*line :400:42*/_Ciconst_FZ_NO_CACHE /*line :400:55*/; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :400:56*/_Cfunc_fz_enable_device_hints(_cgo0, _cgo1, _cgo2); }()
	defer func() func() { _cgo0 := /*line :401:25*/f.ctx; _cgo1 := /*line :401:32*/device; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :401:39*/_Cfunc_fz_drop_device(_cgo0, _cgo1); }}()()

	var cookie  /*line :403:13*/_Ctype_fz_cookie /*line :403:24*/
	func() { _cgo0 := /*line :404:16*/f.ctx; _cgo1 := /*line :404:23*/page; _cgo2 := /*line :404:29*/device; var _cgo3 _Ctype_struct___16 = /*line :404:37*/ctm; var _cgo4 *_Ctype_struct___11 = /*line :404:42*/&cookie; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgo2, nil); /*line :404:50*/_Cfunc_fz_run_page(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	func() { _cgo0 := /*line :406:20*/f.ctx; _cgo1 := /*line :406:27*/device; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :406:34*/_Cfunc_fz_close_device(_cgo0, _cgo1); }()

	str := ( /*line :408:9*/_Cfunc_GoString /*line :408:18*/)(func() *_Ctype_char{ _cgo0 := /*line :408:44*/f.ctx; _cgo1 := /*line :408:51*/buf; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :408:55*/_Cfunc_fz_string_from_buffer(_cgo0, _cgo1); }())

	return str, nil
}

// ToC returns the table of contents (also known as outline).
func (f *Document) ToC() ([]Outline, error) {
	data := make([]Outline, 0)

	outline := func() *_Ctype_struct_fz_outline{ _cgo0 := /*line :417:31*/f.ctx; _cgo1 := /*line :417:38*/f.doc; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :417:44*/_Cfunc_fz_load_outline(_cgo0, _cgo1); }()
	if outline == nil {
		return nil, ErrLoadOutline
	}
	defer func() func() { _cgo0 := /*line :421:26*/f.ctx; _cgo1 := /*line :421:33*/outline; return func() { _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :421:41*/_Cfunc_fz_drop_outline(_cgo0, _cgo1); }}()()

	var walk func(outline * /*line :423:25*/_Ctype_fz_outline /*line :423:37*/, level int)

	walk = func(outline * /*line :425:23*/_Ctype_fz_outline /*line :425:35*/, level int) {
		for outline != nil {
			res := Outline{}
			res.Level = level
			res.Title = ( /*line :429:16*/_Cfunc_GoString /*line :429:25*/)(outline.title)
			res.URI = ( /*line :430:14*/_Cfunc_GoString /*line :430:23*/)(outline.uri)
			res.Page = int(outline.page.page)
			res.Top = float64(outline.y)
			data = append(data, res)

			if outline.down != nil {
				walk(outline.down, level+1)
			}
			outline = outline.next
		}
	}

	walk(outline, 1)
	return data, nil
}

// Metadata returns the map with standard metadata.
func (f *Document) Metadata() map[string]string {
	data := make(map[string]string)

	lookup := func(key string) string {
		ckey := ( /*line :451:11*/_Cfunc_CString /*line :451:19*/)(key)
		defer func() func() { _cgo0 := /*line :452:16*/unsafe.Pointer(ckey); return func() { _cgoCheckPointer(_cgo0, nil); /*line :452:37*/_Cfunc_free(_cgo0); }}()()

		buf := make([]byte, 256)
		func() _Ctype_int{ _cgo0 := /*line :455:24*/f.ctx; _cgo1 := /*line :455:31*/f.doc; var _cgo2 *_Ctype_char = /*line :455:38*/ckey; var _cgo3 *_Ctype_char = /*line :455:44*/(*_Ctype_char /*line :455:52*/)(unsafe.Pointer(&buf[0])); var _cgo4 _Ctype_int = _Ctype_int /*line :455:85*/(len(buf)); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :455:96*/_Cfunc_fz_lookup_metadata(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

		return string(buf)
	}

	data["format"] = lookup("format")
	data["encryption"] = lookup("encryption")
	data["title"] = lookup("info:Title")
	data["author"] = lookup("info:Author")
	data["subject"] = lookup("info:Subject")
	data["keywords"] = lookup("info:Keywords")
	data["creator"] = lookup("info:Creator")
	data["producer"] = lookup("info:Producer")
	data["creationDate"] = lookup("info:CreationDate")
	data["modDate"] = lookup("info:modDate")

	return data
}

// Close closes the underlying fitz document.
func (f *Document) Close() error {
	if f.stream != nil {
		func() { _cgo0 := /*line :477:20*/f.ctx; _cgo1 := /*line :477:27*/f.stream; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :477:36*/_Cfunc_fz_drop_stream(_cgo0, _cgo1); }()
	}

	func() { _cgo0 := /*line :480:21*/f.ctx; _cgo1 := /*line :480:28*/f.doc; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); /*line :480:34*/_Cfunc_fz_drop_document(_cgo0, _cgo1); }()
	func() { _cgo0 := /*line :481:20*/f.ctx; _cgoCheckPointer(_cgo0, nil); /*line :481:26*/_Cfunc_fz_drop_context(_cgo0); }()

	f.data = nil

	return nil
}
