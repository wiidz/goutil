//go:cgo_ldflag "-O2"
//go:cgo_ldflag "-g"
// Code generated by cmd/cgo; DO NOT EDIT.

package process

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
//go:linkname _Cgo_keepalive runtime.cgoKeepAlive
//go:noescape
func _Cgo_keepalive(interface{})
//go:linkname _Cgo_no_callback runtime.cgoNoCallback
func _Cgo_no_callback(bool)
type _Ctype__GoBytes_ []byte

type _Ctype__GoString_ string

type _Ctype___darwin_gid_t = _Ctype___uint32_t

type _Ctype___darwin_off_t = _Ctype___int64_t

type _Ctype___darwin_uid_t = _Ctype___uint32_t

type _Ctype___int64_t = _Ctype_longlong

type _Ctype___uint32_t = _Ctype_uint

type _Ctype_char int8

type _Ctype_fsid_t = _Ctype_struct_fsid

type _Ctype_gid_t = _Ctype___darwin_gid_t

type _Ctype_int int32

type _Ctype_int32_t = _Ctype_int

type _Ctype_int64_t = _Ctype_longlong

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_kern_return_t = _Ctype_int

type _Ctype_long int64

type _Ctype_longlong int64

type _Ctype_mach_timebase_info_t *_Ctype_struct_mach_timebase_info

type _Ctype_off_t = _Ctype___darwin_off_t

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_size_t = _Ctype_ulong

type _Ctype_struct_fsid struct {
	val [2]_Ctype_int32_t
}

type _Ctype_struct_mach_timebase_info struct {
	numer	_Ctype_uint32_t
	denom	_Ctype_uint32_t
}

type _Ctype_struct_proc_taskinfo struct {
	pti_virtual_size	_Ctype_uint64_t
	pti_resident_size	_Ctype_uint64_t
	pti_total_user		_Ctype_uint64_t
	pti_total_system	_Ctype_uint64_t
	pti_threads_user	_Ctype_uint64_t
	pti_threads_system	_Ctype_uint64_t
	pti_policy		_Ctype_int32_t
	pti_faults		_Ctype_int32_t
	pti_pageins		_Ctype_int32_t
	pti_cow_faults		_Ctype_int32_t
	pti_messages_sent	_Ctype_int32_t
	pti_messages_received	_Ctype_int32_t
	pti_syscalls_mach	_Ctype_int32_t
	pti_syscalls_unix	_Ctype_int32_t
	pti_csw			_Ctype_int32_t
	pti_threadnum		_Ctype_int32_t
	pti_numrunning		_Ctype_int32_t
	pti_priority		_Ctype_int32_t
}

type _Ctype_struct_proc_vnodepathinfo struct {
	pvi_cdir	_Ctype_struct_vnode_info_path
	pvi_rdir	_Ctype_struct_vnode_info_path
}

type _Ctype_struct_vinfo_stat struct {
	vst_dev			_Ctype_uint32_t
	vst_mode		_Ctype_uint16_t
	vst_nlink		_Ctype_uint16_t
	vst_ino			_Ctype_uint64_t
	vst_uid			_Ctype_uid_t
	vst_gid			_Ctype_gid_t
	vst_atime		_Ctype_int64_t
	vst_atimensec		_Ctype_int64_t
	vst_mtime		_Ctype_int64_t
	vst_mtimensec		_Ctype_int64_t
	vst_ctime		_Ctype_int64_t
	vst_ctimensec		_Ctype_int64_t
	vst_birthtime		_Ctype_int64_t
	vst_birthtimensec	_Ctype_int64_t
	vst_size		_Ctype_off_t
	vst_blocks		_Ctype_int64_t
	vst_blksize		_Ctype_int32_t
	vst_flags		_Ctype_uint32_t
	vst_gen			_Ctype_uint32_t
	vst_rdev		_Ctype_uint32_t
	vst_qspare		[2]_Ctype_int64_t
}

type _Ctype_struct_vnode_info struct {
	vi_stat	_Ctype_struct_vinfo_stat
	vi_type	_Ctype_int
	vi_pad	_Ctype_int
	vi_fsid	_Ctype_struct_fsid
}

type _Ctype_struct_vnode_info_path struct {
	vip_vi		_Ctype_struct_vnode_info
	vip_path	[1024]_Ctype_char
}

type _Ctype_u_int = _Ctype_uint

type _Ctype_uid_t = _Ctype___darwin_uid_t

type _Ctype_uint uint32

type _Ctype_uint16_t = _Ctype_ushort

type _Ctype_uint32_t = _Ctype_uint

type _Ctype_uint64_t = _Ctype_ulonglong

type _Ctype_ulong uint64

type _Ctype_ulonglong uint64

type _Ctype_ushort uint16

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
//go:noescape
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
//go:noescape
func _cgoCheckResult(interface{})
const _Ciconst_CTL_KERN = 0x1
const _Ciconst_KERN_ARGMAX = 0x8
const _Ciconst_KERN_PROCARGS2 = 0x31
const _Ciconst_PROC_PIDPATHINFO_MAXSIZE = 0x1000
const _Ciconst_PROC_PIDTASKINFO = 0x4
const _Ciconst_PROC_PIDVNODEPATHINFO = 0x9
const _Ciconst_sizeof_int = 0x4
const _Ciconst_sizeof_struct_proc_taskinfo = 0x60
const _Ciconst_sizeof_struct_proc_vnodepathinfo = 0x930

//go:cgo_import_static _cgo_e52c964b4c39_C2func_proc_pidinfo
//go:linkname __cgofn__cgo_e52c964b4c39_C2func_proc_pidinfo _cgo_e52c964b4c39_C2func_proc_pidinfo
var __cgofn__cgo_e52c964b4c39_C2func_proc_pidinfo byte
var _cgo_e52c964b4c39_C2func_proc_pidinfo = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_C2func_proc_pidinfo)

//go:cgo_unsafe_args
func _C2func_proc_pidinfo(p0 _Ctype_int, p1 _Ctype_int, p2 _Ctype_uint64_t, p3 unsafe.Pointer, p4 _Ctype_int) (r1 _Ctype_int, r2 error) {
	errno := _cgo_runtime_cgocall(_cgo_e52c964b4c39_C2func_proc_pidinfo, uintptr(unsafe.Pointer(&p0)))
	if errno != 0 { r2 = syscall.Errno(errno) }
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
		_Cgo_use(p4)
	}
	return
}
//go:cgo_import_static _cgo_e52c964b4c39_C2func_proc_pidpath
//go:linkname __cgofn__cgo_e52c964b4c39_C2func_proc_pidpath _cgo_e52c964b4c39_C2func_proc_pidpath
var __cgofn__cgo_e52c964b4c39_C2func_proc_pidpath byte
var _cgo_e52c964b4c39_C2func_proc_pidpath = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_C2func_proc_pidpath)

//go:cgo_unsafe_args
func _C2func_proc_pidpath(p0 _Ctype_int, p1 unsafe.Pointer, p2 _Ctype_uint32_t) (r1 _Ctype_int, r2 error) {
	errno := _cgo_runtime_cgocall(_cgo_e52c964b4c39_C2func_proc_pidpath, uintptr(unsafe.Pointer(&p0)))
	if errno != 0 { r2 = syscall.Errno(errno) }
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}
//go:cgo_import_static _cgo_e52c964b4c39_C2func_sysctl
//go:linkname __cgofn__cgo_e52c964b4c39_C2func_sysctl _cgo_e52c964b4c39_C2func_sysctl
var __cgofn__cgo_e52c964b4c39_C2func_sysctl byte
var _cgo_e52c964b4c39_C2func_sysctl = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_C2func_sysctl)

//go:cgo_unsafe_args
func _C2func_sysctl(p0 *_Ctype_int, p1 _Ctype_u_int, p2 unsafe.Pointer, p3 *_Ctype_size_t, p4 unsafe.Pointer, p5 _Ctype_size_t) (r1 _Ctype_int, r2 error) {
	errno := _cgo_runtime_cgocall(_cgo_e52c964b4c39_C2func_sysctl, uintptr(unsafe.Pointer(&p0)))
	if errno != 0 { r2 = syscall.Errno(errno) }
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
		_Cgo_use(p4)
		_Cgo_use(p5)
	}
	return
}

//go:linkname _cgo_runtime_gobytes runtime.gobytes
func _cgo_runtime_gobytes(unsafe.Pointer, int) []byte

// GoBytes converts the C data p with explicit length l to a Go []byte.
func _Cfunc_GoBytes(p unsafe.Pointer, l _Ctype_int) []byte {
	return _cgo_runtime_gobytes(p, int(l))
}

//go:linkname _cgo_runtime_gostring runtime.gostring
func _cgo_runtime_gostring(*_Ctype_char) string

// GoString converts the C string p into a Go string.
func _Cfunc_GoString(p *_Ctype_char) string {
	return _cgo_runtime_gostring(p)
}
//go:cgo_import_static _cgo_e52c964b4c39_Cmacro_NULL
//go:linkname __cgofn__cgo_e52c964b4c39_Cmacro_NULL _cgo_e52c964b4c39_Cmacro_NULL
var __cgofn__cgo_e52c964b4c39_Cmacro_NULL byte
var _cgo_e52c964b4c39_Cmacro_NULL = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_Cmacro_NULL)

//go:cgo_unsafe_args
func _Cmacro_NULL() (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_e52c964b4c39_Cmacro_NULL, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}

func _Cfunc__CMalloc(n _Ctype_size_t) unsafe.Pointer {
	return _cgo_cmalloc(uint64(n))
}
//go:cgo_import_static _cgo_e52c964b4c39_Cfunc_free
//go:linkname __cgofn__cgo_e52c964b4c39_Cfunc_free _cgo_e52c964b4c39_Cfunc_free
var __cgofn__cgo_e52c964b4c39_Cfunc_free byte
var _cgo_e52c964b4c39_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_e52c964b4c39_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_e52c964b4c39_Cfunc_mach_timebase_info
//go:linkname __cgofn__cgo_e52c964b4c39_Cfunc_mach_timebase_info _cgo_e52c964b4c39_Cfunc_mach_timebase_info
var __cgofn__cgo_e52c964b4c39_Cfunc_mach_timebase_info byte
var _cgo_e52c964b4c39_Cfunc_mach_timebase_info = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_Cfunc_mach_timebase_info)

//go:cgo_unsafe_args
func _Cfunc_mach_timebase_info(p0 *_Ctype_struct_mach_timebase_info) (r1 _Ctype_kern_return_t) {
	_cgo_runtime_cgocall(_cgo_e52c964b4c39_Cfunc_mach_timebase_info, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_e52c964b4c39_Cfunc_memcpy
//go:linkname __cgofn__cgo_e52c964b4c39_Cfunc_memcpy _cgo_e52c964b4c39_Cfunc_memcpy
var __cgofn__cgo_e52c964b4c39_Cfunc_memcpy byte
var _cgo_e52c964b4c39_Cfunc_memcpy = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_Cfunc_memcpy)

//go:cgo_unsafe_args
func _Cfunc_memcpy(p0 unsafe.Pointer, p1 unsafe.Pointer, p2 _Ctype_size_t) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_e52c964b4c39_Cfunc_memcpy, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}
//go:cgo_import_static _cgo_e52c964b4c39_Cfunc_proc_pidinfo
//go:linkname __cgofn__cgo_e52c964b4c39_Cfunc_proc_pidinfo _cgo_e52c964b4c39_Cfunc_proc_pidinfo
var __cgofn__cgo_e52c964b4c39_Cfunc_proc_pidinfo byte
var _cgo_e52c964b4c39_Cfunc_proc_pidinfo = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_Cfunc_proc_pidinfo)

//go:cgo_unsafe_args
func _Cfunc_proc_pidinfo(p0 _Ctype_int, p1 _Ctype_int, p2 _Ctype_uint64_t, p3 unsafe.Pointer, p4 _Ctype_int) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_e52c964b4c39_Cfunc_proc_pidinfo, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
		_Cgo_use(p4)
	}
	return
}
//go:cgo_import_static _cgo_e52c964b4c39_Cfunc_proc_pidpath
//go:linkname __cgofn__cgo_e52c964b4c39_Cfunc_proc_pidpath _cgo_e52c964b4c39_Cfunc_proc_pidpath
var __cgofn__cgo_e52c964b4c39_Cfunc_proc_pidpath byte
var _cgo_e52c964b4c39_Cfunc_proc_pidpath = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_Cfunc_proc_pidpath)

//go:cgo_unsafe_args
func _Cfunc_proc_pidpath(p0 _Ctype_int, p1 unsafe.Pointer, p2 _Ctype_uint32_t) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_e52c964b4c39_Cfunc_proc_pidpath, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}
//go:cgo_import_static _cgo_e52c964b4c39_Cfunc_sysctl
//go:linkname __cgofn__cgo_e52c964b4c39_Cfunc_sysctl _cgo_e52c964b4c39_Cfunc_sysctl
var __cgofn__cgo_e52c964b4c39_Cfunc_sysctl byte
var _cgo_e52c964b4c39_Cfunc_sysctl = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_Cfunc_sysctl)

//go:cgo_unsafe_args
func _Cfunc_sysctl(p0 *_Ctype_int, p1 _Ctype_u_int, p2 unsafe.Pointer, p3 *_Ctype_size_t, p4 unsafe.Pointer, p5 _Ctype_size_t) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_e52c964b4c39_Cfunc_sysctl, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
		_Cgo_use(p4)
		_Cgo_use(p5)
	}
	return
}

//go:cgo_import_static _cgo_e52c964b4c39_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_e52c964b4c39_Cfunc__Cmalloc _cgo_e52c964b4c39_Cfunc__Cmalloc
var __cgofn__cgo_e52c964b4c39_Cfunc__Cmalloc byte
var _cgo_e52c964b4c39_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_e52c964b4c39_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_e52c964b4c39_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
