//go:cgo_ldflag "-O2"
//go:cgo_ldflag "-g"
// Code generated by cmd/cgo; DO NOT EDIT.

package mem

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
//go:linkname _Cgo_keepalive runtime.cgoKeepAlive
//go:noescape
func _Cgo_keepalive(interface{})
//go:linkname _Cgo_no_callback runtime.cgoNoCallback
func _Cgo_no_callback(bool)
type _Ctype___darwin_mach_port_name_t = _Ctype___darwin_natural_t

type _Ctype___darwin_mach_port_t = _Ctype___darwin_mach_port_name_t

type _Ctype___darwin_natural_t = _Ctype_uint

type _Ctype_host_flavor_t = _Ctype_integer_t

type _Ctype_host_info_t *_Ctype_integer_t

type _Ctype_host_t = _Ctype_mach_port_t

type _Ctype_int int32

type _Ctype_integer_t = _Ctype_int

type _Ctype_kern_return_t = _Ctype_int

type _Ctype_mach_msg_type_number_t = _Ctype_natural_t

type _Ctype_mach_port_t = _Ctype___darwin_mach_port_t

type _Ctype_natural_t = _Ctype___darwin_natural_t

type _Ctype_struct_vm_statistics struct {
	free_count		_Ctype_natural_t
	active_count		_Ctype_natural_t
	inactive_count		_Ctype_natural_t
	wire_count		_Ctype_natural_t
	zero_fill_count		_Ctype_natural_t
	reactivations		_Ctype_natural_t
	pageins			_Ctype_natural_t
	pageouts		_Ctype_natural_t
	faults			_Ctype_natural_t
	cow_faults		_Ctype_natural_t
	lookups			_Ctype_natural_t
	hits			_Ctype_natural_t
	purgeable_count		_Ctype_natural_t
	purges			_Ctype_natural_t
	speculative_count	_Ctype_natural_t
}

type _Ctype_uint uint32

type _Ctype_uintptr_t = _Ctype_ulong

type _Ctype_ulong uint64

type _Ctype_vm_size_t = _Ctype_uintptr_t

type _Ctype_vm_statistics_data_t = _Ctype_struct_vm_statistics

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
//go:noescape
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
//go:noescape
func _cgoCheckResult(interface{})
//go:linkname __cgo_vm_kernel_page_size vm_kernel_page_size
//go:cgo_import_static vm_kernel_page_size
var __cgo_vm_kernel_page_size byte
var _Cvar_vm_kernel_page_size *_Ctype_vm_size_t = (*_Ctype_vm_size_t)(unsafe.Pointer(&__cgo_vm_kernel_page_size))
const _Ciconst_HOST_VM_INFO = 0x2
const _Ciconst_HOST_VM_INFO_COUNT = 0xf
const _Ciconst_KERN_SUCCESS = 0x0

//go:cgo_import_static _cgo_a38aff211b52_Cfunc_host_statistics
//go:linkname __cgofn__cgo_a38aff211b52_Cfunc_host_statistics _cgo_a38aff211b52_Cfunc_host_statistics
var __cgofn__cgo_a38aff211b52_Cfunc_host_statistics byte
var _cgo_a38aff211b52_Cfunc_host_statistics = unsafe.Pointer(&__cgofn__cgo_a38aff211b52_Cfunc_host_statistics)

//go:cgo_unsafe_args
func _Cfunc_host_statistics(p0 _Ctype_host_t, p1 _Ctype_host_flavor_t, p2 *_Ctype_integer_t, p3 *_Ctype_mach_msg_type_number_t) (r1 _Ctype_kern_return_t) {
	_cgo_runtime_cgocall(_cgo_a38aff211b52_Cfunc_host_statistics, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
	}
	return
}
//go:cgo_import_static _cgo_a38aff211b52_Cfunc_mach_host_self
//go:linkname __cgofn__cgo_a38aff211b52_Cfunc_mach_host_self _cgo_a38aff211b52_Cfunc_mach_host_self
var __cgofn__cgo_a38aff211b52_Cfunc_mach_host_self byte
var _cgo_a38aff211b52_Cfunc_mach_host_self = unsafe.Pointer(&__cgofn__cgo_a38aff211b52_Cfunc_mach_host_self)

//go:cgo_unsafe_args
func _Cfunc_mach_host_self() (r1 _Ctype_mach_port_t) {
	_cgo_runtime_cgocall(_cgo_a38aff211b52_Cfunc_mach_host_self, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}
