// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/hujiayilu/go/pkg/mod/github.com/shirou/gopsutil/v3@v3.23.10/cpu/cpu_darwin_cgo.go:1:1
//go:build darwin && cgo
// +build darwin,cgo

package cpu

/*
#include <stdlib.h>
#include <sys/sysctl.h>
#include <sys/mount.h>
#include <mach/mach_init.h>
#include <mach/mach_host.h>
#include <mach/host_info.h>
#include <TargetConditionals.h>
#if TARGET_OS_MAC
#include <libproc.h>
#endif
#include <mach/processor_info.h>
#include <mach/vm_map.h>
*/
import _ "unsafe"

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"unsafe"
)

// these CPU times for darwin is borrowed from influxdb/telegraf.

func perCPUTimes() ([]TimesStat, error) {
	var (
		count    /*line :33:11*/_Ctype_mach_msg_type_number_t /*line :33:35*/
		cpuload * /*line :34:12*/_Ctype_processor_cpu_load_info_data_t /*line :34:44*/
		ncpu     /*line :35:11*/_Ctype_natural_t /*line :35:22*/
	)

	status := func() _Ctype_kern_return_t{ var _cgo0 _Ctype_host_t = _Ctype_host_t /*line :38:42*/(_Cfunc_mach_host_self /*line :38:59*/()); var _cgo1 _Ctype_processor_flavor_t = /*line :39:3*/_Ciconst_PROCESSOR_CPU_LOAD_INFO /*line :39:28*/; var _cgo2 *_Ctype_natural_t = /*line :40:3*/&ncpu; _cgoBase3 := /*line :41:46*/&cpuload; _cgo3 := /*line :41:3*/(*_Ctype_processor_info_array_t /*line :41:29*/)(unsafe.Pointer(_cgoBase3)); var _cgo4 *_Ctype_mach_msg_type_number_t = /*line :42:3*/&count; _cgoCheckPointer(_cgoBase3, 0 == 0); return /*line :42:10*/_Cfunc_host_processor_info(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()

	if status != ( /*line :44:15*/_Ciconst_KERN_SUCCESS /*line :44:28*/) {
		return nil, fmt.Errorf("host_processor_info error=%d", status)
	}

	// jump through some cgo casting hoops and ensure we properly free
	// the memory that cpuload points to
	target :=  /*line :50:12*/_Ctype_vm_map_t /*line :50:22*/(( /*line :50:23*/*_Cvar_mach_task_self_ /*line :50:39*/))
	address :=  /*line :51:13*/_Ctype_vm_address_t /*line :51:27*/(uintptr(unsafe.Pointer(cpuload)))
	defer ( /*line :52:8*/_Cfunc_vm_deallocate /*line :52:22*/)(target, address,  /*line :52:41*/_Ctype_vm_size_t /*line :52:52*/(ncpu))

	// the body of struct processor_cpu_load_info
	// aka processor_cpu_load_info_data_t
	var cpu_ticks [( /*line :56:17*/_Ciconst_CPU_STATE_MAX /*line :56:31*/)]uint32

	// copy the cpuload array to a []byte buffer
	// where we can binary.Read the data
	size := int(ncpu) * binary.Size(cpu_ticks)
	buf := (*[1 << 30]byte)(unsafe.Pointer(cpuload))[:size:size]

	bbuf := bytes.NewBuffer(buf)

	var ret []TimesStat

	for i := 0; i < int(ncpu); i++ {
		err := binary.Read(bbuf, binary.LittleEndian, &cpu_ticks)
		if err != nil {
			return nil, err
		}

		c := TimesStat{
			CPU:    fmt.Sprintf("cpu%d", i),
			User:   float64(cpu_ticks[( /*line :75:30*/_Ciconst_CPU_STATE_USER /*line :75:45*/)]) / ClocksPerSec,
			System: float64(cpu_ticks[( /*line :76:30*/_Ciconst_CPU_STATE_SYSTEM /*line :76:47*/)]) / ClocksPerSec,
			Nice:   float64(cpu_ticks[( /*line :77:30*/_Ciconst_CPU_STATE_NICE /*line :77:45*/)]) / ClocksPerSec,
			Idle:   float64(cpu_ticks[( /*line :78:30*/_Ciconst_CPU_STATE_IDLE /*line :78:45*/)]) / ClocksPerSec,
		}

		ret = append(ret, c)
	}

	return ret, nil
}

func allCPUTimes() ([]TimesStat, error) {
	var count  /*line :88:12*/_Ctype_mach_msg_type_number_t /*line :88:36*/
	var cpuload  /*line :89:14*/_Ctype_host_cpu_load_info_data_t /*line :89:41*/

	count = ( /*line :91:10*/_Ciconst_HOST_CPU_LOAD_INFO_COUNT /*line :91:35*/)

	status := ( /*line :93:12*/_Cfunc_host_statistics /*line :93:28*/)( /*line :93:30*/_Ctype_host_t /*line :93:38*/(( /*line :93:39*/_Cfunc_mach_host_self /*line :93:54*/)()),
		( /*line :94:3*/_Ciconst_HOST_CPU_LOAD_INFO /*line :94:22*/),
		 /*line :95:3*/_Ctype_host_info_t /*line :95:16*/(unsafe.Pointer(&cpuload)),
		&count)

	if status != ( /*line :98:15*/_Ciconst_KERN_SUCCESS /*line :98:28*/) {
		return nil, fmt.Errorf("host_statistics error=%d", status)
	}

	c := TimesStat{
		CPU:    "cpu-total",
		User:   float64(cpuload.cpu_ticks[( /*line :104:37*/_Ciconst_CPU_STATE_USER /*line :104:52*/)]) / ClocksPerSec,
		System: float64(cpuload.cpu_ticks[( /*line :105:37*/_Ciconst_CPU_STATE_SYSTEM /*line :105:54*/)]) / ClocksPerSec,
		Nice:   float64(cpuload.cpu_ticks[( /*line :106:37*/_Ciconst_CPU_STATE_NICE /*line :106:52*/)]) / ClocksPerSec,
		Idle:   float64(cpuload.cpu_ticks[( /*line :107:37*/_Ciconst_CPU_STATE_IDLE /*line :107:52*/)]) / ClocksPerSec,
	}

	return []TimesStat{c}, nil
}
