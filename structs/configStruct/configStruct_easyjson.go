// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package configStruct

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct(in *jlexer.Lexer, out *WechatPayConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wechat_pay_app_id":
			out.AppID = string(in.String())
		case "wechat_pay_secret":
			out.Secret = string(in.String())
		case "wechat_pay_mch_id":
			out.MchID = string(in.String())
		case "wechat_pay_cert_uri":
			out.CertURI = string(in.String())
		case "wechat_pay_key_uri":
			out.KeyURI = string(in.String())
		case "wechat_pay_cert_content":
			out.CertContent = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct(out *jwriter.Writer, in WechatPayConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wechat_pay_app_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"wechat_pay_secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	{
		const prefix string = ",\"wechat_pay_mch_id\":"
		out.RawString(prefix)
		out.String(string(in.MchID))
	}
	{
		const prefix string = ",\"wechat_pay_cert_uri\":"
		out.RawString(prefix)
		out.String(string(in.CertURI))
	}
	{
		const prefix string = ",\"wechat_pay_key_uri\":"
		out.RawString(prefix)
		out.String(string(in.KeyURI))
	}
	{
		const prefix string = ",\"wechat_pay_cert_content\":"
		out.RawString(prefix)
		out.String(string(in.CertContent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WechatPayConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WechatPayConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WechatPayConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WechatPayConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct(l, v)
}
func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct1(in *jlexer.Lexer, out *WechatOpenConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wechat_oa_app_id":
			out.AppID = string(in.String())
		case "wechat_oa_app_secret":
			out.AppSecret = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct1(out *jwriter.Writer, in WechatOpenConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wechat_oa_app_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"wechat_oa_app_secret\":"
		out.RawString(prefix)
		out.String(string(in.AppSecret))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WechatOpenConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WechatOpenConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WechatOpenConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WechatOpenConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct1(l, v)
}
func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct2(in *jlexer.Lexer, out *WechatOaConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wechat_oa_app_id":
			out.AppID = string(in.String())
		case "wechat_oa_app_secret":
			out.AppSecret = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct2(out *jwriter.Writer, in WechatOaConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wechat_oa_app_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"wechat_oa_app_secret\":"
		out.RawString(prefix)
		out.String(string(in.AppSecret))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WechatOaConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WechatOaConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WechatOaConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WechatOaConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct2(l, v)
}
func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct3(in *jlexer.Lexer, out *WechatMiniConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wechat_mini_app_id":
			out.AppID = string(in.String())
		case "wechat_mini_app_secret":
			out.AppSecret = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct3(out *jwriter.Writer, in WechatMiniConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wechat_mini_app_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"wechat_mini_app_secret\":"
		out.RawString(prefix)
		out.String(string(in.AppSecret))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WechatMiniConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WechatMiniConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WechatMiniConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WechatMiniConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct3(l, v)
}
func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct4(in *jlexer.Lexer, out *RedisConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "idle_timeout":
			out.IdleTimeout = int(in.Int())
		case "datebase":
			out.Database = int(in.Int())
		case "max_active":
			out.MaxActive = int(in.Int())
		case "max_idle":
			out.MaxIdle = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct4(out *jwriter.Writer, in RedisConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"idle_timeout\":"
		out.RawString(prefix)
		out.Int(int(in.IdleTimeout))
	}
	{
		const prefix string = ",\"datebase\":"
		out.RawString(prefix)
		out.Int(int(in.Database))
	}
	{
		const prefix string = ",\"max_active\":"
		out.RawString(prefix)
		out.Int(int(in.MaxActive))
	}
	{
		const prefix string = ",\"max_idle\":"
		out.RawString(prefix)
		out.Int(int(in.MaxIdle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedisConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedisConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedisConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedisConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct4(l, v)
}
func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct5(in *jlexer.Lexer, out *RabbitMQConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct5(out *jwriter.Writer, in RabbitMQConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RabbitMQConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RabbitMQConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RabbitMQConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RabbitMQConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct5(l, v)
}
func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct6(in *jlexer.Lexer, out *OssConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "oss_access_key_id":
			out.AccessKeyID = string(in.String())
		case "oss_access_key_secret":
			out.AccessKeySecret = string(in.String())
		case "oss_host":
			out.Host = string(in.String())
		case "oss_end_point":
			out.EndPoint = string(in.String())
		case "oss_bucket_name":
			out.BucketName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct6(out *jwriter.Writer, in OssConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"oss_access_key_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessKeyID))
	}
	{
		const prefix string = ",\"oss_access_key_secret\":"
		out.RawString(prefix)
		out.String(string(in.AccessKeySecret))
	}
	{
		const prefix string = ",\"oss_host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"oss_end_point\":"
		out.RawString(prefix)
		out.String(string(in.EndPoint))
	}
	{
		const prefix string = ",\"oss_bucket_name\":"
		out.RawString(prefix)
		out.String(string(in.BucketName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OssConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OssConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OssConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OssConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct6(l, v)
}
func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct7(in *jlexer.Lexer, out *MysqlConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "db_name":
			out.DbName = string(in.String())
		case "charset":
			out.Charset = string(in.String())
		case "collation":
			out.Collation = string(in.String())
		case "setting_table_name":
			out.SettingTableName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct7(out *jwriter.Writer, in MysqlConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"db_name\":"
		out.RawString(prefix)
		out.String(string(in.DbName))
	}
	{
		const prefix string = ",\"charset\":"
		out.RawString(prefix)
		out.String(string(in.Charset))
	}
	{
		const prefix string = ",\"collation\":"
		out.RawString(prefix)
		out.String(string(in.Collation))
	}
	{
		const prefix string = ",\"setting_table_name\":"
		out.RawString(prefix)
		out.String(string(in.SettingTableName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MysqlConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MysqlConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MysqlConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MysqlConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct7(l, v)
}
func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct8(in *jlexer.Lexer, out *EsConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct8(out *jwriter.Writer, in EsConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EsConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EsConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EsConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EsConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct8(l, v)
}
func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct9(in *jlexer.Lexer, out *BaseConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.MysqlConfig = new(MysqlConfig)
	out.RedisConfig = new(RedisConfig)
	out.OssConfig = new(OssConfig)
	out.EsConfig = new(EsConfig)
	out.RabbitMQConfig = new(RabbitMQConfig)
	out.WechatMiniConfig = new(WechatMiniConfig)
	out.WechatOaConfig = new(WechatOaConfig)
	out.WechatOpenConfig = new(WechatOpenConfig)
	out.WechatPayConfig = new(WechatPayConfig)
	out.AliPayConfig = new(AliPayConfig)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alipay_app_id":
			out.AppID = string(in.String())
		case "alipay_private_key":
			out.PrivateKey = string(in.String())
		case "wechat_pay_secret":
			out.Secret = string(in.String())
		case "wechat_pay_mch_id":
			out.MchID = string(in.String())
		case "wechat_pay_cert_uri":
			out.CertURI = string(in.String())
		case "wechat_pay_key_uri":
			out.KeyURI = string(in.String())
		case "wechat_pay_cert_content":
			out.CertContent = string(in.String())
		case "wechat_oa_app_secret":
			out.AppSecret = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "oss_access_key_id":
			out.AccessKeyID = string(in.String())
		case "oss_access_key_secret":
			out.AccessKeySecret = string(in.String())
		case "oss_end_point":
			out.EndPoint = string(in.String())
		case "oss_bucket_name":
			out.BucketName = string(in.String())
		case "ip":
			out.IP = string(in.String())
		case "idle_timeout":
			out.IdleTimeout = int(in.Int())
		case "datebase":
			out.Database = int(in.Int())
		case "max_active":
			out.MaxActive = int(in.Int())
		case "max_idle":
			out.MaxIdle = int(in.Int())
		case "db_name":
			out.DbName = string(in.String())
		case "charset":
			out.Charset = string(in.String())
		case "collation":
			out.Collation = string(in.String())
		case "setting_table_name":
			out.SettingTableName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct9(out *jwriter.Writer, in BaseConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alipay_app_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"alipay_private_key\":"
		out.RawString(prefix)
		out.String(string(in.PrivateKey))
	}
	{
		const prefix string = ",\"wechat_pay_secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	{
		const prefix string = ",\"wechat_pay_mch_id\":"
		out.RawString(prefix)
		out.String(string(in.MchID))
	}
	{
		const prefix string = ",\"wechat_pay_cert_uri\":"
		out.RawString(prefix)
		out.String(string(in.CertURI))
	}
	{
		const prefix string = ",\"wechat_pay_key_uri\":"
		out.RawString(prefix)
		out.String(string(in.KeyURI))
	}
	{
		const prefix string = ",\"wechat_pay_cert_content\":"
		out.RawString(prefix)
		out.String(string(in.CertContent))
	}
	{
		const prefix string = ",\"wechat_oa_app_secret\":"
		out.RawString(prefix)
		out.String(string(in.AppSecret))
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	{
		const prefix string = ",\"oss_access_key_id\":"
		out.RawString(prefix)
		out.String(string(in.AccessKeyID))
	}
	{
		const prefix string = ",\"oss_access_key_secret\":"
		out.RawString(prefix)
		out.String(string(in.AccessKeySecret))
	}
	{
		const prefix string = ",\"oss_end_point\":"
		out.RawString(prefix)
		out.String(string(in.EndPoint))
	}
	{
		const prefix string = ",\"oss_bucket_name\":"
		out.RawString(prefix)
		out.String(string(in.BucketName))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"idle_timeout\":"
		out.RawString(prefix)
		out.Int(int(in.IdleTimeout))
	}
	{
		const prefix string = ",\"datebase\":"
		out.RawString(prefix)
		out.Int(int(in.Database))
	}
	{
		const prefix string = ",\"max_active\":"
		out.RawString(prefix)
		out.Int(int(in.MaxActive))
	}
	{
		const prefix string = ",\"max_idle\":"
		out.RawString(prefix)
		out.Int(int(in.MaxIdle))
	}
	{
		const prefix string = ",\"db_name\":"
		out.RawString(prefix)
		out.String(string(in.DbName))
	}
	{
		const prefix string = ",\"charset\":"
		out.RawString(prefix)
		out.String(string(in.Charset))
	}
	{
		const prefix string = ",\"collation\":"
		out.RawString(prefix)
		out.String(string(in.Collation))
	}
	{
		const prefix string = ",\"setting_table_name\":"
		out.RawString(prefix)
		out.String(string(in.SettingTableName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct9(l, v)
}
func easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct10(in *jlexer.Lexer, out *AliPayConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alipay_app_id":
			out.AppID = string(in.String())
		case "alipay_private_key":
			out.PrivateKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct10(out *jwriter.Writer, in AliPayConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alipay_app_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppID))
	}
	{
		const prefix string = ",\"alipay_private_key\":"
		out.RawString(prefix)
		out.String(string(in.PrivateKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AliPayConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AliPayConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4db26ec9EncodeGithubComWiidzGoutilStructsConfigStruct10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AliPayConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AliPayConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4db26ec9DecodeGithubComWiidzGoutilStructsConfigStruct10(l, v)
}
